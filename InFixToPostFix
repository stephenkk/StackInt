
public class StackChars {
	public static int top = -1;	//top always has to start at -1
	
	public static char [] B;    //array of char to house Infix Expression
	
	
	
	public StackChars(int size) {
		//initialize array capacity to given size
		B = new char [size];
		
		//end constructor
	}

	public static void push (char c) {
		
		top++;		//push onto top by incrementing top
		B[top]=c;
	
	}
	
	public static char pop () {
		
		top--;			//decrement top to remove from stack
		return  B[top+1]; //return the "removed" char
	}
	
	public static  int whereIsTop() {// returns the array index of the top value
		return top;
	}
	
	public static boolean stackEmpty() {// determines if stack is empty
		
		if (top == -1)
			return true;
		return false;
	}
	//the method will convert an inFix expression to postfix
	public static String inFixtoPostFix(String InFixExp) {
		
		String postFixExp = "";
		int i = 0;
		int precedenceTop = 0;//precedence indicator for operator on top of stack
		int precedenceChar = 0;//precedence indicator to next operator in the infix expression
		
 		for (i = 0; i < InFixExp.length(); i++) {
			if (InFixExp.charAt(i) != '+' && InFixExp.charAt(i) != '-' && InFixExp.charAt(i) != '*' && InFixExp.charAt(i) != '/' && InFixExp.charAt(i) != '^') 
				postFixExp = postFixExp + InFixExp.charAt(i);
				//if next character is a number append it to the postFixExp
			else {
				
				/*if (InFixExp.charAt(i) == '(')
					push(InFixExp.charAt(i));
				
				if (InFixExp.charAt(i) ==')') {
					while (B[top] != '(')
						postFixExp = postFixExp + pop();
						pop();
				}*/
				System.out.println(InFixExp.charAt(i));
				
				if (stackEmpty())
					push(InFixExp.charAt(i));
				
				if (InFixExp.charAt(i) == '^') 
					precedenceChar = 2;//assign highest precedence to ^,/
									
				
				if (InFixExp.charAt(i) == '*' || InFixExp.charAt(i) == '/')		
				precedenceChar = 1;//assign higher precedence to *,/
			
				if (InFixExp.charAt(i) == '+' || InFixExp.charAt(i) == '-')
				precedenceChar = 0;//assign lowest precedence to +,-
		
				/*the method needs to check for three cases and proceed accordingly:
				 * precedenceChar equals precedenceTop, precedenceChar > precedenceTop,
				 * and precedenceChar < precedenceTop.
				
				
				
				 * precendenceChar and precendenceTop both initialize at zero, but the
				 * first operator in the infix expression must be pushed regardless of its
				 * precedence. The if stackEmpty clause takes care of this
				 */
				
				if (precedenceChar == precedenceTop) {
					if (stackEmpty())
						push(InFixExp.charAt(i));
					else {
						postFixExp = postFixExp + pop();
						push(InFixExp.charAt(i));
						/* this elso clause will swap * with / from the expression to the stack
						 * (and vice versa) and will swap + with - (and vice versa)
						 */
					}
				}
				
				if (!stackEmpty() && (B[top] == ('^')))
					precedenceTop = 2;	//assign highest precedence to ^
					 
				if (!stackEmpty() && (B[top] == ('*') || B[top] == ('/')))
						precedenceTop = 1;	//assign higher precedence to *, / than +,-
				
				if (!stackEmpty() && (B[top] == ('+') || B[top] == ('-')))
					precedenceTop = 0;	//assign lowest precedence to +, -
				
				if (precedenceChar > precedenceTop)
					push(InFixExp.charAt(i));/* if precedence of next operator is higher
											than that of the top of the stack, push.*/
				
				if (precedenceChar < precedenceTop) {
					postFixExp = postFixExp + pop();
					push(InFixExp.charAt(i));/* if precedence of next operator is lower
												than that of the top of the stack swap 
												them ie pop and push*/
				}
					
				}
	
			}
 		while (!stackEmpty()) //after last character in infix exp pop all remaining operators
			postFixExp = (postFixExp + pop());
		
 		return postFixExp;
	}
}
